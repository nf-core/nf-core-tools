#!/usr/bin/env python

import json
import os
import requests
from requests.auth import HTTPBasicAuth
import sys
import syncutils.template
import syncutils.utils

# Set the default nf-core pipeline template branch
DEF_TEMPLATE_BRANCH = "TEMPLATE"
# The GitHub base url or the nf-core project
GH_BASE_URL = "https://{token}@github.com/nf-core/{pipeline}"
# The JSON file is updated on every push event on the nf-core GitHub project
NF_CORE_PIPELINE_INFO = "http://nf-co.re/pipelines.json"
# The API endpoint for creating pull requests
GITHUB_PR_URL_TEMPL = "https://api.github.com/repos/nf-core/{pipeline}/pulls"
# Current script dir
PATH_PARENT_DIR = os.path.dirname(os.path.realpath(__file__))

sync_errors = []
pr_errors = []


def create_pullrequest(pipeline, origin="dev", template="TEMPLATE", token="", user="nf-core"):
    """Create a pull request to a base branch (default: dev),
    from a head branch (default: TEMPLATE)

    Returns: An instance of class requests.Response
    """
    content = {}
    content['title'] = "Important pipeline nf-core update! (version {tag})".format(tag=os.environ['TRAVIS_TAG'])
    content['body'] = "Some important changes have been made in the nf-core pipelines templates.\n" \
    "Please make sure to merge this in ASAP and make a new minor release of your pipeline.\n\n" \
    "Follow the link [nf-core/tools](https://github.com/nf-core/tools/releases/tag/{})".format(os.environ['TRAVIS_TAG'])
    content['head'] = "{}".format(template)
    content['base'] = origin
    return requests.post(url=GITHUB_PR_URL_TEMPL.format(pipeline=pipeline),
                         data=json.dumps(content),
                         auth=HTTPBasicAuth(user, token))


def filter_blacklisted_pipelines_from_list(pipelines, blacklisted_pipelines):
    filtered_pipelines = []
    for pipeline in pipelines:
        if not pipeline.get('name'):
            print("No attribute \'name\' for pipeline found: {}".format(pipeline))
        else:
            filtered_pipelines.append(pipeline) if pipeline.get('name') not in blacklisted_pipelines \
                else filtered_pipelines
    return filtered_pipelines


def fetch_black_listed_pipelines_from_file(file_path):
    with open(file_path) as fh:
        blacklist = json.load(fh)
    return blacklist.get('pipelines')


def fetch_nfcore_workflows_from_website(url):
    try:
        res = requests.get(url)
        pipelines = res.json().get('remote_workflows')
    except Exception as e:
        print("Could not get remote workflows. Reason was: {}".format(e))
        pipelines = []
    return pipelines


def update_template_branch_for_pipeline(pipeline):
    try:
        syncutils.template.NfcoreTemplate(
            pipeline['name'],
            branch=DEF_TEMPLATE_BRANCH,
            repo_url=GH_BASE_URL.format(token=os.environ["NF_CORE_BOT"], pipeline=pipeline['name'])
        ).sync()
    except Exception as e:
        sync_errors.append((pipeline['name'], e))


def create_pullrequest_if_update_sucessful(pipeline):
    name = pipeline.get('name')
    for errored_pipeline, _ in sync_errors:
        if name == errored_pipeline:
            return
    response = create_pullrequest(name, token=os.environ["NF_CORE_BOT"])
    if response.status_code != 201:
        pr_errors.append((name, response.status_code, response.content))
    else:
        print("Created pull-request for pipeline \'{pipeline}\' successfully."
              .format(pipeline=name))


def main():
    assert os.environ['TRAVIS_TAG']
    assert os.environ['NF_CORE_BOT']

    blacklisted_pipeline_names = fetch_black_listed_pipelines_from_file(PATH_PARENT_DIR + "/blacklist.json")

    pipelines = fetch_nfcore_workflows_from_website(NF_CORE_PIPELINE_INFO)

    if len(sys.argv) > 1:
        pipeline_to_sync = sys.argv[1] 
        filtered_pipelines = [pipeline for pipeline in pipelines if pipeline_to_sync in pipeline.get('name')]
    else:
        filtered_pipelines = filter_blacklisted_pipelines_from_list(pipelines, blacklisted_pipeline_names)

    for pipeline in filtered_pipelines:
        print("Update template branch for pipeline '{pipeline}'... ".format(pipeline=pipeline['name']))
        update_template_branch_for_pipeline(pipeline)
        print("Trying to open pull request for pipeline {}...".format(pipeline['name']))
        create_pullrequest_if_update_sucessful(pipeline)

    for pipeline, exception in sync_errors:
        print("WARNING!!!! Sync for pipeline {name} failed.".format(name=pipeline))
        print(exception)

    for pipeline, return_code, content in pr_errors:
        print("WARNING!!!! Pull-request for pipeline \'{pipeline}\' failed,"
              " got return code {return_code}."
              .format(pipeline=pipeline, return_code=return_code))
        print(content)

    sys.exit(0)


if __name__ == "__main__":
    main()
